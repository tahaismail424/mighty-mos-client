{"ast":null,"code":"import { __spreadArray, __read } from 'tslib';\nimport { once } from '../utils.js';\n/**\r\n * Create a schema that lazily delegates to the given schema.\r\n */\n\nfunction lazy(schemaFn) {\n  var getSchema = once(schemaFn); // Memoize schema\n\n  return {\n    type: function () {\n      return \"Lazy<\" + getSchema().type() + \">\";\n    },\n    map: function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return (_a = getSchema()).map.apply(_a, __spreadArray([], __read(args)));\n    },\n    unmap: function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return (_a = getSchema()).unmap.apply(_a, __spreadArray([], __read(args)));\n    },\n    validateBeforeMap: function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return (_a = getSchema()).validateBeforeMap.apply(_a, __spreadArray([], __read(args)));\n    },\n    validateBeforeUnmap: function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return (_a = getSchema()).validateBeforeUnmap.apply(_a, __spreadArray([], __read(args)));\n    },\n    mapXml: function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return (_a = getSchema()).mapXml.apply(_a, __spreadArray([], __read(args)));\n    },\n    unmapXml: function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return (_a = getSchema()).unmapXml.apply(_a, __spreadArray([], __read(args)));\n    },\n    validateBeforeMapXml: function () {\n      var _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return (_a = getSchema()).validateBeforeMapXml.apply(_a, __spreadArray([], __read(args)));\n    }\n  };\n}\nexport { lazy };","map":{"version":3,"names":["__spreadArray","__read","once","lazy","schemaFn","getSchema","type","map","_a","args","_i","arguments","length","apply","unmap","validateBeforeMap","validateBeforeUnmap","mapXml","unmapXml","validateBeforeMapXml"],"sources":["/Users/tahaismail/web_projects/mighty_mos/client/node_modules/@apimatic/schema/es/types/lazy.js"],"sourcesContent":["import { __spreadArray, __read } from 'tslib';\nimport { once } from '../utils.js';\n/**\r\n * Create a schema that lazily delegates to the given schema.\r\n */\n\nfunction lazy(schemaFn) {\n  var getSchema = once(schemaFn); // Memoize schema\n\n  return {\n    type: function () {\n      return \"Lazy<\" + getSchema().type() + \">\";\n    },\n    map: function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return (_a = getSchema()).map.apply(_a, __spreadArray([], __read(args)));\n    },\n    unmap: function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return (_a = getSchema()).unmap.apply(_a, __spreadArray([], __read(args)));\n    },\n    validateBeforeMap: function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return (_a = getSchema()).validateBeforeMap.apply(_a, __spreadArray([], __read(args)));\n    },\n    validateBeforeUnmap: function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return (_a = getSchema()).validateBeforeUnmap.apply(_a, __spreadArray([], __read(args)));\n    },\n    mapXml: function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return (_a = getSchema()).mapXml.apply(_a, __spreadArray([], __read(args)));\n    },\n    unmapXml: function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return (_a = getSchema()).unmapXml.apply(_a, __spreadArray([], __read(args)));\n    },\n    validateBeforeMapXml: function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return (_a = getSchema()).validateBeforeMapXml.apply(_a, __spreadArray([], __read(args)));\n    }\n  };\n}\n\nexport { lazy };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}